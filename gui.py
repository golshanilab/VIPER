# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main-GUIDesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tifffile as tif
from VIPER.ImportData import import_data
import os
import stat
import shutil # Folder removal so we don't have to write code with os that recursively does it
import pyqtgraph as pg
import zarr
import numpy as np
#from VIPER.Registration import register
#from VIPER.TraceExtraction import trace_extraction, initial_ext
import csv
import scipy.io as sio
from Cellpose.cellpose_run import CellposeRunner, context_region
import subprocess
from rechunker import rechunk
from sys import getsizeof
import traceback

from datetime import datetime


# try:
#     from VIPER.Registration_gpu import register as register_gpu
#     import cupy as cp
# except:
#     pass

#  import cupy as cp  # Future GPU optimization

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        
        screen_resolution = (app.primaryScreen().size().width(), app.primaryScreen().size().height())
        testing = False
        self.importDataClicked = False
        self.registerDataClicked = False
        self.setupUi(self, testing, screen_resolution)


    ## Initial font and screen resolution setup ##
    def setupScreenResolution(self, screen_resolution):
        self.screen_resolution = screen_resolution
        self.setObjectName("MainWindow")

        wpx = (screen_resolution[0]*3)//4
        hpx = (screen_resolution[1]*3)//4
        self.resize(wpx, hpx)
    def setupFont(self):
        self.font = QtGui.QFont()
        self.font.setFamily("Century Gothic")
        self.font.setPointSize(9)
        self.font.setBold(False)
        self.font.setItalic(False)
        self.font.setUnderline(False)
        self.font.setWeight(50)
        self.font.setStrikeOut(False)
        self.font.setKerning(True)
    
    ## Set up tabs and central widget ##
    def setupCentralWidget(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainWindowLayout = QtWidgets.QGridLayout(self.centralwidget)
    def setupTabWidget(self):
        self.VoltagePipelineTabWidget = QtWidgets.QTabWidget()
        self.mainWindowLayout.addWidget(self.VoltagePipelineTabWidget, 0, 0, 1, 1)
        self.VoltagePipelineTabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.VoltagePipelineTabWidget.setIconSize(QtCore.QSize(20, 20))
        self.VoltagePipelineTabWidget.setDocumentMode(True)
        self.VoltagePipelineTabWidget.setObjectName("VoltagePipelineTabWidget")
    
    ## Set up import tab and it's components ##
    def setupImportTab(self):
        self.setupImportTabFrame()
        self.setupImportTabImageFrame()
        self.setupImportTabMediaControls()
        self.setupImportTabDownSampling()
        self.setupImportTabFileSelect()
        self.setupImportTabGPUState()
        self.setupImportTabLoadingLabel()
        self.setupImportTabPolarity()
        self.setupImportTabFrameRate()
        self.setupImportTabVideoDisplay()
        self.setupImportTabNextButton()
        self.addToImportTabMainFrame()
    def setupImportTabFrame(self):
        self.ImportTab = QtWidgets.QWidget()
        self.importLayout = QtWidgets.QGridLayout(self.ImportTab)
        self.ImportTab.setObjectName("ImportTab")

        self.importFrame = QtWidgets.QFrame()
        self.importFrame.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.importFrame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.importFrame.setLineWidth(10)
        self.importFrame.setMidLineWidth(10)
        self.importFrame.setObjectName("importFrame")
        self.importLayout.addWidget(self.importFrame, 0, 0, 1, 1)

        self.importFrameLayout = QtWidgets.QGridLayout(self.importFrame)
        self.importFrameLayout.setObjectName("importFrameLayout")
    def setupImportTabImageFrame(self):
        self.imageFrame = QtWidgets.QFrame()
        self.imageFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.imageFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.imageFrame.setObjectName("imageFrame")
    def setupImportTabMediaControls(self):
        self.mediaSlider_2 = QtWidgets.QSlider()
        self.mediaSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.mediaSlider_2.setObjectName("mediaSlider_2")
        self.mediaSlider_2.setFont(self.font)

        self.mediaTimeLabel_2 = QtWidgets.QLabel()
        self.mediaTimeLabel_2.setWordWrap(False)
        self.mediaTimeLabel_2.setObjectName("mediaTimeLabel_2")
        self.mediaTimeLabel_2.setFont(self.font)
        self.emptySpace = QtWidgets.QSpacerItem(40,40)

        self.startButton_2 = QtWidgets.QPushButton()
        self.startButton_2.setObjectName("startButton_2")
        self.startButton_2.setFont(self.font)

        self.playButtonLayout = QtWidgets.QHBoxLayout()        
        self.playButtonLayout.addItem(self.emptySpace)
        self.playButtonLayout.addItem(self.emptySpace)
        self.playButtonLayout.addWidget(self.startButton_2)
        self.playButtonLayout.setObjectName("playButtonLayout")

        self.playImportedVid = True
    def setupImportTabDownSampling(self):
        self.downsamplingLabel = QtWidgets.QLabel()
        self.downsamplingLabel.setFont(self.font)
        self.downsamplingLabel.setObjectName("downsamplingLabel")

        self.downsamplingInput = QtWidgets.QComboBox()
        self.downsamplingInput.setEditable(False)
        self.downsamplingInput.setMaxVisibleItems(5)
        self.downsamplingInput.setObjectName("downsamplingInput")
        self.downsamplingInput.addItem("")
        self.downsamplingInput.addItem("")
        self.downsamplingInput.addItem("")
        self.downsamplingInput.addItem("")
        self.downsamplingInput.addItem("")
        self.downsamplingInput.setFont(self.font)
        self.downsamplingInput.setStyleSheet("QComboBox { padding: 8px;}")
        self.downsamplingInput.setItemDelegate(CenteredItemDelegate())
    def setupImportTabFileSelect(self):
        self.selectFileButton = QtWidgets.QPushButton()
        self.selectFileButton.setFont(self.font)
        self.selectFileButton.setMouseTracking(False)
        self.selectFileButton.setObjectName("selectFileButton")

        self.pathToFileLabel = QtWidgets.QLabel()
        self.pathToFileLabel.setFont(self.font)
        self.pathToFileLabel.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pathToFileLabel.setObjectName("pathToFileLabel")

        self.loadFileButton = QtWidgets.QPushButton()
        self.loadFileButton.setFont(self.font)
        self.loadFileButton.setMouseTracking(False)
        self.loadFileButton.setObjectName("loadFileButton")
    def setupImportTabGPUState(self):
        self.GPUstate = QtWidgets.QComboBox()
        self.GPUstate.setEditable(False)
        self.GPUstate.setMaxVisibleItems(2)
        self.GPUstate.setObjectName("GPUstate")
        self.GPUstate.addItem("")
        self.GPUstate.addItem("")
        self.GPUstate.setFont(self.font)
        self.GPUstate.setStyleSheet("QComboBox { padding: 8px;}")
        self.GPUstate.setItemDelegate(CenteredItemDelegate())
        self.GPU_mode = False
    def setupImportTabLoadingLabel(self):
        self.loadingLabel = QtWidgets.QLabel()
        self.loadingLabel.setFont(self.font)    
        self.loadingLabel.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.loadingLabel.setObjectName("loadingLabel")
    def setupImportTabPolarity(self):
        self.polarityLabel = QtWidgets.QLabel()
        self.polarityLabel.setFont(self.font)
        self.polarityLabel.setObjectName("polarityLabel")

        self.polarityInput = QtWidgets.QComboBox()
        self.polarityInput.setEditable(False)
        self.polarityInput.setMaxVisibleItems(2)
        self.polarityInput.setObjectName("polarityInput")
        self.polarityInput.addItem("")
        self.polarityInput.addItem("")
        self.polarityInput.setFont(self.font)
        self.polarityInput.setStyleSheet("QComboBox { padding: 8px; }")
        self.polarityInput.setItemDelegate(CenteredItemDelegate())
        self.polarity = "Positive"
    def setupImportTabFrameRate(self):
        self.frameRateLabel = QtWidgets.QLabel()
        self.frameRateLabel.setFont(self.font)
        self.frameRateLabel.setObjectName("frameRateLabel")

        #self.frameRate = 500 # default for most computer
        
        self.frameRateSpinBox = QtWidgets.QSpinBox()
        self.frameRateSpinBox.setObjectName("frameRateInput")
        self.frameRateSpinBox.setRange(0,2500)
        self.frameRateSpinBox.setValue(500)
        self.frameRateSpinBox.setFont(self.font)
        self.frameRateSpinBox.setStyleSheet("QSpinBox { padding: 8px;}")
        self.frameRate = self.frameRateSpinBox.value()
    def setupImportTabVideoDisplay(self):
        ############################################################################
        # https://pyqtgraph.readthedocs.io/en/latest/api_reference/widgets/imageview.html
        self.imageFrameLayout = QtWidgets.QVBoxLayout(self.imageFrame)
        self.importVideo = pg.ImageView() # QtWidgets.QLabel(self.imageFrame)
        self.imageFrameLayout.addWidget(self.importVideo)
        self.importVideo.ui.roiBtn.hide()
        self.importVideo.ui.roiPlot.hide()
        self.importVideo.ui.menuBtn.hide()
        self.importVideo.ui.histogram.hide()
        self.importVideo.getView().invertY(True)
        self.importVideo.setObjectName("importVideo")
        ############################################################################
    def setupImportTabNextButton(self):
        self.nextToRegistrationButton = QtWidgets.QPushButton()
        self.nextToRegistrationButton.setFont(self.font)    
        self.nextToRegistrationButton.setAutoFillBackground(False)
        self.nextToRegistrationButton.setAutoDefault(False)
        self.nextToRegistrationButton.setDefault(False)
        self.nextToRegistrationButton.setFlat(False)
        self.nextToRegistrationButton.setObjectName("nextToRegistrationButton")
    def addToImportTabMainFrame(self):
        self.importFrameLayout.addWidget(self.imageFrame, 0, 1, 4, 6)
        self.importFrameLayout.addWidget(self.mediaSlider_2, 4, 1, 1, 6)
        self.importFrameLayout.addWidget(self.mediaTimeLabel_2, 4, 7, 1, 1)
        self.importFrameLayout.addLayout(self.playButtonLayout, 4, 0, 1, 1)
        self.importFrameLayout.addWidget(self.polarityLabel, 6, 1, 1, 1)
        self.importFrameLayout.addWidget(self.polarityInput, 6, 2, 1, 1)
        self.importFrameLayout.addWidget(self.downsamplingLabel, 6, 3, 1, 1)
        self.importFrameLayout.addWidget(self.downsamplingInput, 6, 4, 1, 1)
        self.importFrameLayout.addWidget(self.frameRateLabel, 6, 5, 1, 1)
        self.importFrameLayout.addWidget(self.frameRateSpinBox, 6, 6, 1, 1)
        self.importFrameLayout.addWidget(self.selectFileButton, 7, 1, 1, 1)
        self.importFrameLayout.addWidget(self.pathToFileLabel, 7, 3, 1, 5)
        self.importFrameLayout.addWidget(self.loadFileButton, 7, 6, 1, 1)
        self.importFrameLayout.addWidget(self.GPUstate, 7, 2, 1, 1)
        self.importFrameLayout.addWidget(self.loadingLabel, 8, 0, 1, self.importFrameLayout.columnCount(), QtCore.Qt.AlignCenter)
        self.importFrameLayout.addWidget(self.nextToRegistrationButton, 9, 7, 1, 1)
        
        self.VoltagePipelineTabWidget.addTab(self.ImportTab, "")
    ## End of import tab set up ##

    ## Set up registration tab and it's components ##
    # Set up registration tab frame
    def setupRegistrationTab(self):
        self.setupRegistrationTabFrame()
        self.setupRegistrationTabInputOutputTab()
        self.setupRegistrationTabImageFrame()

        self.setupRegistrationTabParametersFrame()
        self.setupRegistrationTabTemplateFrame()
        self.setupRegistrationTabFramesAverage()
        self.setupRegistrationTabOffsetFrame()
        self.setupRegistrationTabUpdateEvery_Frames()
        self.setupRegistrationTabContrast()
        self.setupRegistrationTabParametersDivisionLine()
        self.setupRegistrationTabWindowFrame()
        self.setupRegistrationTabRowCoordinates()
        self.setupRegistrationTabColumnCoordinates()
        self.setupRegistrationTabApply()
        self.setupRegistrationTabRegister()
        self.addToRegistrationTabInputFrame()

        self.setupRegistrationTabOutputFrame()
        self.setupRegistrationTabStatistics()
        self.setupRegistrationTabImageWindow()
        self.setupRegistrationTabShiftPlots()
        self.setupRegistrationTabMediaControls()
        self.addtoRegistrationTabOutputFrame()
    def setupRegistrationTabFrame(self):
        self.RegistrationTab = QtWidgets.QWidget()
        self.registrationLayout = QtWidgets.QGridLayout(self.RegistrationTab)
        self.RegistrationTab.setObjectName("RegistrationTab")

        self.RegistrationFrame = QtWidgets.QFrame()
        self.RegistrationFrame.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.RegistrationFrame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.RegistrationFrame.setLineWidth(10)
        self.RegistrationFrame.setMidLineWidth(10)
        self.RegistrationFrame.setObjectName("RegistrationFrame")
        self.registrationLayout.addWidget(self.RegistrationFrame, 0, 0, 1, 1)
    def setupRegistrationTabInputOutputTab(self):
        self.InputOutputTab = QtWidgets.QTabWidget()
        self.registrationInputOutputLayout = QtWidgets.QGridLayout(self.RegistrationFrame)
        self.registrationInputOutputLayout.setObjectName("registrationInputOutputLayout")
        self.registrationInputOutputLayout.addWidget(self.InputOutputTab, 0, 0, 1, 1)
        
        self.InputOutputTab.setFont(self.font)
        self.InputOutputTab.setAutoFillBackground(False)
        self.InputOutputTab.setDocumentMode(True)
        self.InputOutputTab.setObjectName("InputOutputTab")

        self.InputTab = QtWidgets.QWidget()
        self.InputTab.setObjectName("InputTab")
        self.registrationInputLayout = QtWidgets.QGridLayout(self.InputTab)
        self.registrationInputLayout.setObjectName("registrationInputLayout")
    
    # Set up input tab
    def setupRegistrationTabImageFrame(self):
        self.horizontalLayoutWidget = QtWidgets.QWidget()
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")

        self.inputImageLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.inputImageLayout.setSpacing(20)
        self.inputImageLayout.setObjectName("inputImageLayout")

        ####   INPUT IMAGE UNSIZED   ####
        self.inputImageUnsized = pg.PlotWidget()
        self.inputImageLayout.addWidget(self.inputImageUnsized)
        self.inputImageUnsized.setObjectName("inputImageUnsized")
        #################################
        self.line_3 = QtWidgets.QFrame(self.horizontalLayoutWidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.inputImageLayout.addWidget(self.line_3)

        ####   INPUT IMAGE RESIZED   ####
        self.inputImageResized = pg.PlotWidget()
        self.inputImageLayout.addWidget(self.inputImageResized)
        self.inputImageResized.setObjectName("inputImageResized")
        #################################
    def setupRegistrationTabParametersFrame(self):
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.InputTab)
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")

        self.parametersLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.parametersLayout.setContentsMargins(0, 0, 0, 0)
        self.parametersLayout.setSpacing(50)
        self.parametersLayout.setObjectName("parametersLayout")
    def setupRegistrationTabTemplateFrame(self):
        self.templateLayout = QtWidgets.QVBoxLayout()
        self.templateLayout.setContentsMargins(10, 10, 10, 10)
        self.templateLayout.setSpacing(80)
        self.templateLayout.setObjectName("templateLayout")

        self.templateLabelLayout = QtWidgets.QHBoxLayout()
        self.templateLabelLayout.setObjectName("templateLabelLayout")
        self.templateLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.templateLabel.setFont(self.font)
        self.templateLabel.setObjectName("templateLabel")

        self.templateLabelLayout.addWidget(self.templateLabel)
        self.templateLayout.addLayout(self.templateLabelLayout)
    def setupRegistrationTabFramesAverage(self):
        self.framesAverageLayout = QtWidgets.QHBoxLayout()
        self.framesAverageLayout.setContentsMargins(10, -1, 10, -1)
        self.framesAverageLayout.setObjectName("framesAverageLayout")
        self.averageFramesText = QtWidgets.QLabel(self.horizontalLayoutWidget_2)

        self.averageFramesText.setFont(self.font)
        self.averageFramesText.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.averageFramesText.setObjectName("averageFramesText")
        self.framesAverageLayout.addWidget(self.averageFramesText)

        self.averageFramesSpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.averageFramesSpinBox.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.averageFramesSpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.averageFramesSpinBox.setObjectName("averageFramesSpinBox")
        self.framesAverageLayout.addWidget(self.averageFramesSpinBox)
        self.templateLayout.addLayout(self.framesAverageLayout)
    def setupRegistrationTabOffsetFrame(self):
        self.offsetLayout = QtWidgets.QHBoxLayout()
        self.offsetLayout.setContentsMargins(10, -1, 10, -1)
        self.offsetLayout.setObjectName("offsetLayout")
        self.offsetText = QtWidgets.QLabel(self.horizontalLayoutWidget_2)

        self.offsetText.setFont(self.font)
        self.offsetText.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.offsetText.setObjectName("offsetText")
        self.offsetLayout.addWidget(self.offsetText)
    def setupRegistrationTabUpdateEvery_Frames(self):
        self.updateEveryFramesSpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.updateEveryFramesSpinBox.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.updateEveryFramesSpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.updateEveryFramesSpinBox.setObjectName("updateEveryFramesSpinBox")
        self.offsetLayout.addWidget(self.updateEveryFramesSpinBox)
        self.templateLayout.addLayout(self.offsetLayout)
    def setupRegistrationTabContrast(self):
        self.contrastLayout = QtWidgets.QHBoxLayout()
        self.contrastLayout.setContentsMargins(10, -1, 10, -1)
        self.contrastLayout.setObjectName("contrastLayout")

        self.contrastText = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.contrastText.setFont(self.font)
        self.contrastText.setObjectName("contrastText")
        self.contrastLayout.addWidget(self.contrastText)

        self.contrastSpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.contrastSpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.contrastSpinBox.setObjectName("contrastSpinBox")
        self.contrastLayout.addWidget(self.contrastSpinBox)
        self.templateLayout.addLayout(self.contrastLayout)
        self.parametersLayout.addLayout(self.templateLayout)
    def setupRegistrationTabParametersDivisionLine(self):
        self.parametersDivisionLine = QtWidgets.QFrame(self.horizontalLayoutWidget_2)
        self.parametersDivisionLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.parametersDivisionLine.setLineWidth(1)
        self.parametersDivisionLine.setFrameShape(QtWidgets.QFrame.VLine)
        self.parametersDivisionLine.setObjectName("parametersDivisionLine")
        self.parametersLayout.addWidget(self.parametersDivisionLine)
    def setupRegistrationTabWindowFrame(self):
        self.windowLayout = QtWidgets.QVBoxLayout()
        self.windowLayout.setContentsMargins(-1, 10, 10, 10)
        self.windowLayout.setSpacing(80)
        self.windowLayout.setObjectName("windowLayout")

        self.windowLabelLayout = QtWidgets.QHBoxLayout()
        self.windowLabelLayout.setObjectName("windowLabelLayout")

        self.windowLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.windowLabel.setFont(self.font)
        self.windowLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.windowLabel.setObjectName("windowLabel")
        self.windowLabelLayout.addWidget(self.windowLabel)
        self.windowLayout.addLayout(self.windowLabelLayout)
    def setupRegistrationTabRowCoordinates(self):
        self.rowLayout = QtWidgets.QHBoxLayout()
        self.rowLayout.setContentsMargins(10, -1, 10, -1)
        self.rowLayout.setSpacing(20)
        self.rowLayout.setObjectName("rowLayout")

        self.rowLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.rowLabel.setFont(self.font)
        self.rowLabel.setObjectName("rowLabel")
        self.rowLayout.addWidget(self.rowLabel)

        self.row1Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.row1Label.setObjectName("row1Label")
        self.rowLayout.addWidget(self.row1Label)

        self.row1SpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.row1SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.row1SpinBox.setObjectName("row1SpinBox")
        self.rowLayout.addWidget(self.row1SpinBox)

        self.row2Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.row2Label.setObjectName("row2Label")
        self.rowLayout.addWidget(self.row2Label)

        self.row2SpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.row2SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.row2SpinBox.setObjectName("row2SpinBox")
        self.rowLayout.addWidget(self.row2SpinBox)
        self.windowLayout.addLayout(self.rowLayout)
    def setupRegistrationTabColumnCoordinates(self):
        self.columnLayout = QtWidgets.QHBoxLayout()
        self.columnLayout.setContentsMargins(10, -1, 10, -1)
        self.columnLayout.setSpacing(20)
        self.columnLayout.setObjectName("columnLayout")

        self.columnLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.columnLabel.setFont(self.font)
        self.columnLabel.setObjectName("columnLabel")
        self.columnLayout.addWidget(self.columnLabel)

        self.column1Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.column1Label.setObjectName("column1Label")
        self.columnLayout.addWidget(self.column1Label)

        self.column1SpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.column1SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.column1SpinBox.setObjectName("column1SpinBox")
        self.columnLayout.addWidget(self.column1SpinBox)

        self.column2Label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.column2Label.setObjectName("column2Label")
        self.columnLayout.addWidget(self.column2Label)

        self.column2SpinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget_2)
        self.column2SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.column2SpinBox.setObjectName("column2SpinBox")
        self.columnLayout.addWidget(self.column2SpinBox)
        self.windowLayout.addLayout(self.columnLayout)
    def setupRegistrationTabApply(self):
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(40, -1, 40, -1)
        self.horizontalLayout.setSpacing(50)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.applyButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.applyButton.setObjectName("applyButton")
        self.horizontalLayout.addWidget(self.applyButton)
    def setupRegistrationTabRegister(self):
        self.registerButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.registerButton.setObjectName("registerButton")
        self.horizontalLayout.addWidget(self.registerButton)
        self.windowLayout.addLayout(self.horizontalLayout)
        self.parametersLayout.addLayout(self.windowLayout)

        self.registrationProgressBar = QtWidgets.QProgressBar(self.InputTab)
        self.registrationProgressBar.setProperty("value", 24)
        self.registrationProgressBar.setObjectName("registrationProgressBar")

        self.InputOutputTab.addTab(self.InputTab, "")

        self.registerLoadingLabel = QtWidgets.QLabel(self.RegistrationTab)
        self.registerLoadingLabel.setObjectName("registerLoadingLabel")
        self.addSpacer = QtWidgets.QSpacerItem(0, 20) 
    def addToRegistrationTabInputFrame(self):
        self.registrationInputLayout.addWidget(self.horizontalLayoutWidget, 0, 0, 1, 1)
        self.registrationInputLayout.addItem(self.addSpacer, 1, 0, 1, 1)
        self.registrationInputLayout.addWidget(self.horizontalLayoutWidget_2, 2, 0, 1, 1, QtCore.Qt.AlignTop)

        self.registrationInputLayout.addWidget(self.registrationProgressBar, 3, 0, 1, 1)
        self.registrationInputLayout.addWidget(self.registerLoadingLabel, 4, 0, 1, 1)

        self.registrationInputLayout.setRowStretch(0, 25)
        self.registrationInputLayout.setRowStretch(1, 1)
        self.registrationInputLayout.setRowStretch(2, 25)
        self.registrationInputLayout.setRowStretch(3, 1)
        self.registrationInputLayout.setRowStretch(4, 1)


        self.OutputTab = QtWidgets.QWidget()
    
    # Set up output tab
    def setupRegistrationTabOutputFrame(self):
        self.OutputTab.setObjectName("OutputTab")
        #self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.OutputTab)
        #self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(0, 0, 1201, 387))
        #self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.registeredImageLayout = QtWidgets.QGridLayout(self.OutputTab)
        #self.registeredImageLayout.setContentsMargins(10, 10, 14, 10)
        #self.registeredImageLayout.setSpacing(20)
        self.registeredImageLayout.setObjectName("registeredImageLayout")
        #self.registeredImageLayout.setVerticalSpacing(20)
        #self.registeredImageLayout.setHorizontalSpacing(20)
    def setupRegistrationTabStatistics(self):
        self.paramsLayout = QtWidgets.QVBoxLayout()
        self.paramsLayout.setObjectName("paramsLayout")
        #self.paramsLayout.setObjectName("paramsLayout")
        #self.registeredImageLayout.addLayout(self.paramsLayout, 0, 0, 0, 0)

        self.numFramesLabel = QtWidgets.QLabel()
        self.numFramesLabel.setObjectName("numFramesLabel")
        self.paramsLayout.addWidget(self.numFramesLabel)

        self.updateEveryFramesLabel = QtWidgets.QLabel()
        self.updateEveryFramesLabel.setObjectName("updateEveryFramesLabel")
        self.paramsLayout.addWidget(self.updateEveryFramesLabel)

        self.contrastLabel = QtWidgets.QLabel()
        self.contrastLabel.setObjectName("contrastLabel")
        self.paramsLayout.addWidget(self.contrastLabel)

        self.rowCoordinatesLabel = QtWidgets.QLabel()
        self.rowCoordinatesLabel.setObjectName("rowCoordinatesLabel")
        self.paramsLayout.addWidget(self.rowCoordinatesLabel)

        self.columnCoordinatesLabel = QtWidgets.QLabel()
        self.columnCoordinatesLabel.setObjectName("columnCoordinatesLabel")
        self.paramsLayout.addWidget(self.columnCoordinatesLabel)
        #spacerItem = QtWidgets.QSpacerItem(0, 160, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        #self.paramsLayout.addItem(spacerItem)

        #self.registeredImageLayout.addLayout(self.paramsLayout)
        #self.separator = QtWidgets.QFrame()
        #self.separator.setFrameShape(QtWidgets.QFrame.VLine)
        #self.separator.setFrameShadow(QtWidgets.QFrame.Sunken)
        #self.separator.setObjectName("separator")
        #self.registeredImageLayout.addWidget(self.separator, 0, 1, 1, 1)
        #self.registeredImageLayout_2 = QtWidgets.QVBoxLayout()

        #self.registeredImageLayout_2.setObjectName("registeredImageLayout_2")
        #self.registeredImageLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        #self.registeredImageLabel.setObjectName("registeredImageLabel")
        #self.registeredImageLayout_2.addWidget(self.registeredImageLabel)
    def setupRegistrationTabImageWindow(self):
        self.registeredImageFrame = QtWidgets.QFrame()
        self.registeredImageFrameLayout = QtWidgets.QVBoxLayout(self.registeredImageFrame)  
        self.registeredImage = pg.ImageView()
        self.registeredImageFrameLayout.addWidget(self.registeredImage)
        self.registeredImage.ui.roiBtn.hide()
        self.registeredImage.ui.roiPlot.hide()
        self.registeredImage.ui.menuBtn.hide()
        self.registeredImage.ui.histogram.hide()
        self.registeredImage.setObjectName("registeredImage")
        self.registeredImage.getView().invertY(True)
    def setupRegistrationTabShiftPlots(self):
        #self.line = QtWidgets.QFrame(self.OutputTab)
        #self.line.setGeometry(QtCore.QRect(10, 380, 1181, 20))
        #self.line.setFrameShape(QtWidgets.QFrame.HLine)
        #self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        #self.line.setObjectName("line")
        #self.registeredImageLayout.addWidget(self.line, 1, 0, 1, 2)

        #self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.OutputTab)
        #self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 400, 581, 225))
        #self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        #self.xyshiftLayout = QtWidgets.QVBoxLayout(self.OutputTab)
        #self.xyshiftLayout.setContentsMargins(0, 0, 0, 0)
        #self.xyshiftLayout.setObjectName("xyshiftLayout")
        #self.registeredImageLayout.addLayout(self.xyshiftLayout, 1, 0, 1, 2)

        self.xShift = pg.PlotWidget()
        self.xShift.setObjectName("xShift")
        self.registeredImageLayout.addWidget(self.xShift,1,0,1,2)

        self.yShift = pg.PlotWidget()
        #self.xShiftImage.setMaximumSize(QtCore.QSize(560, 16777215))
        self.yShift.setObjectName("yShift")
    def setupRegistrationTabMediaControls(self):
        self.registeredTimeLayout = QtWidgets.QGridLayout()
        self.registeredTimeLayout.setObjectName("registeredTimeLayout")

        self.registeredImageTime = QtWidgets.QLabel()
        self.registeredImageTime.setAlignment(QtCore.Qt.AlignCenter)
        self.registeredImageTime.setObjectName("registeredImageTime")
        self.registeredTimeLayout.addWidget(self.registeredImageTime,0,1,1,1)

        self.registeredImageSlider = QtWidgets.QSlider()
        #self.registeredImageSlider.setAlignment(QtCore.Qt.AlignCenter)
        #self.registeredImageSlider.setGeometry(QtCore.QRect(630, 460, 521, 31))
        self.registeredImageSlider.setOrientation(QtCore.Qt.Horizontal)
        self.registeredImageSlider.setObjectName("registeredImageSlider")
        self.registeredTimeLayout.addWidget(self.registeredImageSlider,1,0,1,2)

        self.registeredImageMediaButton = QtWidgets.QPushButton()
        self.registeredImagePlayVid = True
        #self.registeredImageStart.setAlignment(QtCore.Qt.AlignCenter)
        #self.registeredImageStart.setGeometry(QtCore.QRect(630, 500, 61, 31))
        self.registeredImageMediaButton.setObjectName("registeredMediaButton")
        self.registeredImageMediaButton.setStyleSheet("QPushButton { padding: 8px; width: 150px;}")
        
        #self.registeredImageStop = QtWidgets.QPushButton()
        
        #self.registeredImageStop.setAlignment(QtCore.Qt.AlignCenter)
        #self.registeredImageStop.setGeometry(QtCore.QRect(700, 500, 61, 31))
        
        #self.registeredImageStop.setObjectName("registeredImageStop")
        
        self.registeredTimeLayout.addWidget(self.registeredImageMediaButton, 2, 0, 1, self.registeredTimeLayout.columnCount(), QtCore.Qt.AlignLeft)
        
        #self.registeredTimeLayout.addWidget(self.registeredImageStop,2,1,1,1)

        #self.yShiftLabel = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        #self.yShiftLabel.setObjectName("yShiftLabel")
        #self.xyshiftLayout.addWidget(self.yShiftLabel)
        #self.yShiftImage = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        #self.yShiftImage.setMaximumSize(QtCore.QSize(560, 16777215))
        #self.yShiftImage.setObjectName("yShiftImage")
        #self.xyshiftLayout.addWidget(self.yShiftImage)
        self.saveRegData = QtWidgets.QPushButton()
        #self.saveRegData.setGeometry(QtCore.QRect(1072, 590, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.saveRegData.setFont(font)
        self.saveRegData.setObjectName("saveRegData")
        self.registeredTimeLayout.addWidget(self.saveRegData,2,0,1,self.registeredTimeLayout.columnCount(), QtCore.Qt.AlignCenter)
        self.saveRegData.setStyleSheet("QPushButton { padding: 8px; width: 500px;}")

        self.nextToSegmentationButton = QtWidgets.QPushButton()
        self.nextToSegmentationButton.setObjectName("nextToSegmentationButton")
        self.nextToSegmentationButton.setStyleSheet("QPushButton { padding: 8px; width: 150px}")
        self.registeredTimeLayout.addWidget(self.nextToSegmentationButton, 2, 0, 1, self.registeredTimeLayout.columnCount(), QtCore.Qt.AlignRight)
    def addtoRegistrationTabOutputFrame(self):
        self.registeredImageLayout.addLayout(self.paramsLayout, 0, 0, 1, 1)
        self.registeredImageLayout.addWidget(self.registeredImageFrame, 0, 1, 1, 1)
        self.registeredImageLayout.addWidget(self.yShift,2,0,1,2)
        self.registeredImageLayout.addLayout(self.registeredTimeLayout, 3, 0, 1, 2)
        self.registeredImageLayout.setRowStretch(0, 9)  # Make the first row twice as large
        self.registeredImageLayout.setRowStretch(1, 1)  # Set the other rows to normal size
        self.registeredImageLayout.setRowStretch(2, 1)
        self.registeredImageLayout.setRowStretch(3, 1)
        self.registeredImageLayout.setRowStretch(4, 1)
        self.registeredImageLayout.setColumnStretch(0, 1)  # Make the first row twice as large
        self.registeredImageLayout.setColumnStretch(1, 2)# Set the other rows to normal size
        
        self.InputOutputTab.addTab(self.OutputTab, "")
        self.VoltagePipelineTabWidget.addTab(self.RegistrationTab, "")
    
    ## End of registration tab set up ##

    ## Set up segmentation tab and it's components ##
    def setupSegmentationTab(self):
        self.setupSegmentationTabFrame()
        self.setupSegmentationTabImageAndROIs()
        self.setupSegmentationTabModelSelect()
        self.setupSegmentationTabExtractTrace()
        self.addtoSegmentationTabFrame()
    def setupSegmentationTabFrame(self):
        #sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        #sizePolicy.setHorizontalStretch(0)
        #sizePolicy.setVerticalStretch(0)
        #sizePolicy.setHeightForWidth(self.SegmentationTab.sizePolicy().hasHeightForWidth())
        #self.SegmentationTab.setSizePolicy(sizePolicy)

        self.SegmentationTab = QtWidgets.QWidget()
        self.segmentLayout = QtWidgets.QGridLayout(self.SegmentationTab)
        self.segmentLayout.setObjectName("segmentLayout")
        self.SegmentationTab.setObjectName("SegmentationTab")
    def setupSegmentationTabImageAndROIs(self):
        self.segmentFrame = QtWidgets.QFrame()
        self.segmentFrame.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.segmentFrame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.segmentFrame.setLineWidth(10)
        self.segmentFrame.setMidLineWidth(10)
        self.segmentFrame.setObjectName("segmentFrame")
        self.segmentLayout.addWidget(self.segmentFrame, 0, 0, 1, 1)

        self.segmentFrameLayout = QtWidgets.QGridLayout(self.segmentFrame)
        self.segmentFrameLayout.setObjectName("segmentFrameLayout")
        self.segmentedContours = pg.ImageView()
        self.segmentedContours.ui.roiBtn.hide()
        self.segmentedContours.ui.roiPlot.hide()
        self.segmentedContours.ui.menuBtn.hide()
        self.segmentedContours.ui.histogram.hide()
        self.segmentedContours.setObjectName("segmentedContours")
        self.segmentedContours.getView().invertY(True)
        self.segmentedContours.getView().setMouseEnabled(x=False, y=False)

        self.verticalLineDivider = QtWidgets.QFrame()
        self.verticalLineDivider.setFrameShape(QtWidgets.QFrame.VLine)
        self.verticalLineDivider.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.verticalLineDivider.setObjectName("verticalLineDivider")
        
        
        self.segmentedROIs  = pg.ImageView()
        self.segmentedROIs.ui.roiBtn.hide()
        self.segmentedROIs.ui.roiPlot.hide()
        self.segmentedROIs.ui.menuBtn.hide()
        self.segmentedROIs.ui.histogram.hide()
        self.segmentedROIs.setObjectName("segmentedROIs")
        self.segmentedROIs.getView().invertY(True)
        self.segmentedROIs.getView().setMouseEnabled(x=False, y=False)
    def setupSegmentationTabModelSelect(self):
        # self.manualSegment = QtWidgets.QPushButton(self.SegmentationTab)
        # self.manualSegment.setObjectName("manualSegment")
        # self.manualSegment.setFont(self.font)

        self.modelState = QtWidgets.QComboBox(self.SegmentationTab)
        self.modelState.setEditable(False)
        self.modelState.setMaxVisibleItems(2)
        self.modelState.setObjectName("modelState")
        self.modelState.addItem("")
        self.modelState.addItem("")
        self.modelState.setFont(self.font)
        self.modelState.setStyleSheet("QComboBox { padding: 8px;}")
        self.modelState.setItemDelegate(CenteredItemDelegate())
        self.modelSelected = "Use Model"

        self.resetPoints = QtWidgets.QPushButton(self.SegmentationTab)
        self.resetPoints.setObjectName("resetPoints")
        self.resetPoints.setFont(self.font)

        ## Select Model to Apply
        self.selectModel = QtWidgets.QPushButton(self.SegmentationTab)
        self.selectModel.setObjectName("selectModel")
        self.selectModel.setFont(self.font)
        
        self.pathToModelLabel = QtWidgets.QLabel(self.SegmentationTab)
        self.pathToModelLabel.setGeometry(QtCore.QRect(390, 530, 421, 41))
        self.pathToModelLabel.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pathToModelLabel.setObjectName("pathToModelLabel")
        self.pathToModelLabel.setFont(self.font)
        
        self.applyModel = QtWidgets.QPushButton(self.SegmentationTab)
        self.applyModel.setObjectName("applyModel")
        self.applyModel.setFont(self.font)
    def setupSegmentationTabExtractTrace(self):
        self.extractTraceButton = QtWidgets.QPushButton(self.SegmentationTab)
        self.extractTraceButton.setObjectName("extractTraceButton")
        self.extractTraceButton.setFont(self.font)

        # Useless code???
        self.modelLayout = QtWidgets.QHBoxLayout()
        self.modelLayout.setObjectName("modelLayout")
    def addtoSegmentationTabFrame(self):
        # Add the two plots at the top next to each other with a divider in between
        self.segmentFrameLayout.addWidget(self.segmentedContours, 0, 0, 4, 4)
        self.segmentFrameLayout.addWidget(self.verticalLineDivider, 0, 4, 4, 1)
        self.segmentFrameLayout.addWidget(self.segmentedROIs, 0, 5, 4, 4)

        # Add the modelState dropdown, the selectModel button, the reset button, and the Segment button in the same row
        self.segmentFrameLayout.addWidget(self.modelState, 5, 0, 4, 1)
        self.segmentFrameLayout.addWidget(self.selectModel, 5, 1, 4, 1)
        self.segmentFrameLayout.addWidget(self.resetPoints, 5, 1, 4, 1)
        self.segmentFrameLayout.addWidget(self.pathToModelLabel, 5, 2, 4, 5)
        self.segmentFrameLayout.addWidget(self.applyModel, 5, 8, 4, 1)

        # Add the next button at the very bottom
        self.segmentFrameLayout.addWidget(self.extractTraceButton, 9, 0, 1, 1)
    ## End of segmentation tab set up ##
    
    ## Set up neuron extraction tab ##
    # Create a more organized frame and more visually appealing UI? 
    def setupExtractionTab(self):
        self.setupExtractionTabFrame()
        self.setupExtractionTabSegmentedImage()
        self.setupExtractionTabTraces()
        self.setupExtractionTabSourceNumberLabel()
        self.setupExtractionTabSourceNumberSelect()
        self.setupExtractionTabSourcePlots()
        self.setupExtractionTabRefineExtraction()
        #self.setupExtractionTabSaveData()
        self.addtoExtractionTabFrame()
    def setupExtractionTabFrame(self):
        self.VoltagePipelineTabWidget.addTab(self.SegmentationTab, "")
        
        self.ExtractionTab = QtWidgets.QWidget()
        self.ExtractionTab.setObjectName("ExtractionTab")
        self.extractionLayout = QtWidgets.QGridLayout(self.ExtractionTab)
        self.extractionLayout.setObjectName("extractionLayout")
    def setupExtractionTabSegmentedImage(self):
        self.segmentedSources = pg.ImageView()
        self.segmentedSources.ui.roiBtn.hide()
        self.segmentedSources.ui.roiPlot.hide()
        self.segmentedSources.ui.menuBtn.hide()
        self.segmentedSources.ui.histogram.hide()
        self.segmentedSources.setObjectName("segmentedSources")
        self.segmentedSources.getView().invertY(True)
    def setupExtractionTabTraces(self):
        self.extractedTraces = pg.GraphicsLayoutWidget()
        self.extractedTraces.setObjectName("extractedTraces")
    def setupExtractionTabSourceNumberLabel(self):
        self.sourceNumLabel = QtWidgets.QLabel(self.ExtractionTab)
        self.sourceNumLabel.setObjectName("sourceNumLabel")
        self.sourceNumLabel.setFont(self.font)
        self.sourceNumLabel.setText("Source #:")

        self.sourceNum = QtWidgets.QSpinBox(self.ExtractionTab)
        self.sourceNum.setObjectName("sourceNum")
        self.sourceNum.setFont(self.font)
        self.sourceNum.setAlignment(QtCore.Qt.AlignCenter)
    def setupExtractionTabSourceNumberSelect(self):
        self.sourceNumApply = QtWidgets.QPushButton(self.ExtractionTab)
        self.sourceNumApply.setObjectName("sourceNumApply")
        self.sourceNumApply.setFont(self.font)
    def setupExtractionTabSourcePlots(self):
        self.sourceFootprint = pg.ImageView()
        self.sourceFootprint.ui.roiBtn.hide()
        self.sourceFootprint.ui.roiPlot.hide()
        self.sourceFootprint.ui.menuBtn.hide()
        self.sourceFootprint.ui.histogram.hide()
        self.sourceFootprint.setObjectName("sourceFootprint")
        self.sourceTrace = pg.PlotWidget(viewBox=CustomViewBox(), enableMenu=False)
        self.sourceTrace.setObjectName("sourceTrace")  
        self.sourceSpikewaveform = pg.PlotWidget()
        self.sourceSpikewaveform.setObjectName("sourceSpikewaveform")
    def setupExtractionTabRefineExtraction(self):
        self.refineExtractionButton = QtWidgets.QPushButton(self.ExtractionTab)
        self.refineExtractionButton.setObjectName("refineExtractionButton")
        self.refineExtractionButton.setFont(self.font)
    # def setupExtractionTabSaveData(self):
    #     self.saveDataButton = QtWidgets.QPushButton(self.ExtractionTab)
    #     self.saveDataButton.setObjectName("saveDataButton")
    #     self.saveDataButton.setFont(self.font)
    def addtoExtractionTabFrame(self):
        self.extractionLayout.addWidget(self.segmentedSources, 0, 0, 4, 4)
        self.extractionLayout.addWidget(self.extractedTraces, 0, 4, 4, 4)
        self.extractionLayout.addWidget(self.sourceNumLabel, 4, 0, 1, 1)
        self.extractionLayout.addWidget(self.sourceNum, 4, 1, 1, 1)
        self.extractionLayout.addWidget(self.sourceNumApply, 4, 2, 1, 1)
        self.extractionLayout.addWidget(self.sourceFootprint, 5, 0, 2, 2)
        self.extractionLayout.addWidget(self.sourceTrace, 5, 2, 2, 4)
        self.extractionLayout.addWidget(self.sourceSpikewaveform, 5, 6, 2, 2)
        self.extractionLayout.addWidget(self.refineExtractionButton, 7, 0, 1, 1)
        #self.extractionLayout.addWidget(self.saveDataButton, 7, 7, 1, 1)

        self.VoltagePipelineTabWidget.addTab(self.ExtractionTab, "")
    ## End of neuron extraction tab ##

    ## Initializations ##
    def initializations(self):
        self.importFilePath = None
        self.outputFolderPath = None
        self.tempFolderPath = None
        self.rawData = None
        self.dataSize = None
        self.registeredData = None
        self.shifts = None
        self.temps = None
        self.importTimer = QtCore.QTimer()
        self.registerTimer = QtCore.QTimer()
        self.importSliderTicks = 500 # How many ticks are on the import media slider
        self.registeredSliderTicks = 200
        self.savedFlag = False
        self.importModelPath = None
        self.colors = ['r', 'b', 'g', 'y', 'm', 'c']
        self.rois = []
        self.resultsDict = {}
    
    ## Setting central window, default tab, connecting slots by name ##
    def finalizeMainWindowSetUp(self, MainWindow):
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.VoltagePipelineTabWidget.setCurrentIndex(0)
        self.InputOutputTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    ## Start up ##
    def startupImportTab(self):
        self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("RegistrationTab"), False)
        self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("SegmentationTab"), False)
        self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("ExtractionTab"), False)
        self.loadFileButton.setEnabled(False)
        self.pathToFileLabel.hide()
        self.nextToRegistrationButton.hide()
        #self.fileImportProgressBar.setValue(0)
        # IMPORT DATA SLIDER
        self.mediaSlider_2.setMinimum(0)
        self.mediaSlider_2.setMaximum(self.importSliderTicks) # ISSUE: Look into what would be an optimal value here without lag...
        self.mediaSlider_2.setValue(0)
        self.mediaSlider_2.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.mediaSlider_2.setEnabled(False) # Off on default
    def startupRegistrationTab(self):
        self.applyButton.setEnabled(False)
        self.registerButton.setEnabled(False)
        self.startButton_2.setEnabled(False)
        #self.stopButton_2.setEnabled(False)
        self.averageFramesSpinBox.setRange(1,100)
        self.updateEveryFramesSpinBox.setRange(1,1000)
        self.contrastSpinBox.setRange(1,20)
        self.row1SpinBox.setRange(0,2000)
        self.column1SpinBox.setRange(0,2000)
        self.row2SpinBox.setRange(1,2000)
        self.column2SpinBox.setRange(1,2000)
        self.updateEveryFramesSpinBox.setValue(200)
        self.contrastSpinBox.setValue(3)
        self.averageFramesSpinBox.setValue(20)
        self.registrationProgressBar.setValue(0)
        # REGISTERED DATA SLIDER
        self.registeredImageSlider.setMinimum(0)
        self.registeredImageSlider.setMaximum(self.registeredSliderTicks)
        self.registeredImageSlider.setValue(0)
        self.registeredImageSlider.setTickPosition(QtWidgets.QSlider.TicksBelow)
    def startupSegmentationTab(self):
        self.applyModel.setEnabled(False)
        self.pathToModelLabel.hide()
        self.updateButtons()

    ## Connections ##
    def connectionsImportTab(self):
        self.selectFileButton.clicked.connect(self.openFileDialog)
        self.loadFileButton.clicked.connect(self.loadDataDialog)
        self.nextToRegistrationButton.clicked.connect(lambda: self.VoltagePipelineTabWidget.setCurrentIndex(self.TabIndices("RegistrationTab")))

        # TODO: Make it update the value at the refresh rate of the monitor (USE TIMER TO TRY AND LIMIT SLIDER UPDATE SIGNALS)
        self.mediaSlider_2.valueChanged.connect(self.updateImportMediaTime)
        self.startButton_2.clicked.connect(self.playImportedVideo)
        self.importTimer.timeout.connect(self.showNextImportedFrame)
        #self.stopButton_2.clicked.connect(self.importTimer.stop)
    def connectionsRegistrationTab(self):
        ## Registration Input Tab ##
        self.registeredImageSlider.valueChanged.connect(self.updateRegisteredMediaTime)
        self.registerTimer.timeout.connect(self.showNextRegisteredFrame)
        #self.registeredImageStop.clicked.connect(self.registerTimer.stop)
        # Default test settings for register: 10, 200, 3, (5, 5), (100, 100)
        # Check if spin boxes have their values changed to allow apply button to be enabled
        self.averageFramesSpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.updateEveryFramesSpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.contrastSpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.row1SpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.column1SpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.row2SpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.column2SpinBox.valueChanged.connect(self.checkSpinBoxes)
        self.applyButton.clicked.connect(self.applyRegisterParameters)
        self.registerButton.clicked.connect(self.registerDataDialog)

        ## Registration Output Tab ##
        self.registeredImageMediaButton.clicked.connect(self.playRegisteredVideo)
        self.saveRegData.clicked.connect(self.saveRegisteredData)
        self.nextToSegmentationButton.clicked.connect(self.nextToSegmentation)
    def connectionsSegmentationTab(self):
        self.selectModel.clicked.connect(self.openModelDialog)
        # self.manualSegment.clicked.connect(self.manual_segment)
        self.applyModel.clicked.connect(self.segment_data)
        self.extractTraceButton.clicked.connect(self.extract_trace)
        self.modelState.currentIndexChanged.connect(self.updateButtons)
        self.resetPoints.clicked.connect(self.reset_points)
    def connectionsExtractionTab(self):
        self.sourceNumApply.clicked.connect(self.update_source)
        #self.refineExtractionButton.clicked.connect(self.refine_trace)
        #self.saveDataButton.clicked.connect(self.save_extraction_data)

    ## Testing ##
    def testingUI(self, testing):
        # ZARR DATA PREVIEW TESTING CODE (Comment out when not in use)
        if (testing):
            # zarrdata_raw = zarr.open(r'Desktop/BeaviorSynchronization/Newton/t4_small/raw_map') # Desktop/testing/t9/raw_map.zarr
            zarrdata_raw = zarr.open(r'Testing/raw_map.zarr')
            print(f"Size of data: {len(zarrdata_raw)}")
            # zarrdata_reg = zarr.open(r'Desktop/BeaviorSynchronization/Newton/t4_small/registered_data.zarr')
            zarrdata_reg = zarr.open(r'Testing/registered_data.zarr')
            self.rawData = zarrdata_raw
            self.registeredData = zarrdata_reg
            self.dataSize = len(zarrdata_reg) # DONT USE BECAUSE BRINGS IT ALL INTO MEMORY
            # self.importVideo.setImage(np.transpose(np.array(zarrdata[0]), (1, 0)))
            self.mediaSlider_2.setEnabled(True)
            self.startButton_2.setEnabled(True)
            #self.stopButton_2.setEnabled(True)
            #self.dataImportedDialog(zarrdata_raw)
            self.setRegistrationPage()
            self.InputOutputTab.setTabEnabled(self.TabIndices("OutputTab"), True)
            self.InputOutputTab.setCurrentIndex(self.TabIndices("OutputTab"))
            self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("SegmentationTab"), True)

    def setupUi(self, MainWindow, testing, screen_resolution):
        ## Sets up screen resolution and font settings ##
        self.setupScreenResolution(screen_resolution)
        self.setupFont()

        ## Sets up layout for central screen ##
        self.setupCentralWidget(MainWindow)

        ## Sets up layout for tabs ##
        self.setupTabWidget()

        ## IMPORT DATA TAB ##
        self.setupImportTab()

        ## REGISTRATION TAB ##
        self.setupRegistrationTab()
        
        ## SEGMENTATION TAB ##
        self.setupSegmentationTab()
        
        ## NEURON EXTRACTION TAB ##
        self.setupExtractionTab()
        
        ## Setting central window, default tab, connecting slots by name ##
        self.finalizeMainWindowSetUp(MainWindow)

        ## INITIALIZATIONS ##
        self.initializations()


        #####        STARTUP        #####
        
        ## Import Data Tab ##
        self.startupImportTab()
        ## Registration Tab ##
        self.startupRegistrationTab()
        ## Segmentation Tab ##
        self.startupSegmentationTab()
        #####      CONNECTIONS      #####

        ## Import Data Tab ##
        self.connectionsImportTab()
        ## Registration Tab ##
        self.connectionsRegistrationTab()
        ## Segmentation Tab ##
        self.connectionsSegmentationTab()
        ## Extraction Tab ##
        self.connectionsExtractionTab()
        
        ## Testing ##
        self.testingUI(testing)

    def GPUmode(self, gpu_mode):
        if gpu_mode == "GPU Mode":
            self.GPU_mode = True
        else:
            self.GPU_mode = False
        
    

    def TabIndices(self, tabName):
        if (tabName == "ImportTab"):
            return self.VoltagePipelineTabWidget.indexOf(self.ImportTab)
        elif (tabName == "RegistrationTab"):
            return self.VoltagePipelineTabWidget.indexOf(self.RegistrationTab)
        elif (tabName == "SegmentationTab"):
            return self.VoltagePipelineTabWidget.indexOf(self.SegmentationTab)
        elif (tabName == "ExtractionTab"):
            return self.VoltagePipelineTabWidget.indexOf(self.ExtractionTab)
        elif (tabName == "InputTab"):
            return self.InputOutputTab.indexOf(self.InputTab)
        elif (tabName == "OutputTab"):
            return self.InputOutputTab.indexOf(self.OutputTab)
        else:
            return -1 # Error       # FUTURE IMPLEMENTATION: THROW EXCEPTION
        
    # IMPORT DATA TAB FUNCTIONS
    # ISSUE: The media slider not capturing every frame...
    # ISSUE: What if the amount of frames is less than 100???
    # ISSUE: Look into finding ways to reduce self.importVideo.nframes() call, may be worthwhile optimization
    def updateImportMediaTime(self, value):
        index = min(int((self.dataSize / self.importSliderTicks) * value), self.dataSize - 1) # Calculate the corresponding frame
        # TODO: Shouldn't have to rotate every frame... Have to figure out where it's rotating incorrectly...
        # frame = np.rot90(np.array(self.rawData[index]), k=-1) # Rotate the frame to display correctly
        frame = np.array(self.rawData[index])
        self.importVideo.setImage(frame, axes = {'x':1, 'y':0}, autoLevels = False) # Display the frame
        self.totalTime = self.dataSize // self.frameRateSpinBox.value()
        self.timeTaken = (index + 1) // self.frameRateSpinBox.value()
        self.mediaTimeLabel_2.setText(f"Time: {self.timeTaken}s/{self.totalTime}s")

    def playImportedVideo(self): # ISSUE: Look into condensing into one button instead of two
        if self.playImportedVid:
            self.playImportedVid = False
            self.importTimer.start(10)
            self.startButton_2.setText('Pause')
        else:
            self.playImportedVid = True
            self.startButton_2.setText('Play')
            self.importTimer.stop()

    # def playRegisteredVideo(self): # ISSUE: Look into condensing into one button instead of two
    #     if self.playImportedVid:
    #         self.playImportedVid = False
    #         self.importTimer.start(10)
    #         self.startButton_2.setText('Pause')
    #     else:
    #         self.playImportedVid = True
    #         self.startButton_2.setText('Play')
    #         self.importTimer.stop()

    def showNextImportedFrame(self):
        index = self.mediaSlider_2.value() + 1
        if index >= self.importSliderTicks: # The maximum value of the slider
            self.importTimer.stop()
        else:
            self.mediaSlider_2.setValue(index)  


    def openFileDialog(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        folderPath = QtWidgets.QFileDialog.getExistingDirectory(None, "Select Folder", options=options)
        if folderPath:
            self.importFilePath = folderPath
            # Check if 'outputs' directory exists, if not create it
            outputs_dir = os.path.join(folderPath, 'VIP_outputs')
            if not os.path.exists(outputs_dir):
                os.makedirs(outputs_dir)
            
            # Check if 'temp' directory exists inside 'outputs', if not create it
            temp_dir = os.path.join(outputs_dir, 'temp')
            if not os.path.exists(temp_dir):
                os.makedirs(temp_dir)
            
            # Set self.importFilePath to the 'temp' directory
            self.outputFolderPath = outputs_dir
            self.tempFolderPath = temp_dir

            print("Import Folder:", folderPath)
            print("Output Folder:", outputs_dir)
            print("Temp Folder:", temp_dir)

            self.pathToFileLabel.setText(folderPath)
            self.pathToFileLabel.show()
            self.loadFileButton.setEnabled(True)

    def loadDataDialog(self):
        self.loadingLabel.setText("Importing Frames...")
        self.loadingLabel.setAlignment(QtCore.Qt.AlignCenter) 
        self.selectFileButton.setEnabled(False)
        self.loadFileButton.setEnabled(False)
        self.GPUstate.setEnabled(False)
        self.GPUmode(self.GPUstate.currentText())
        self.importDataThread = ImportDataThread(self.importFilePath, self.tempFolderPath, int(self.downsamplingInput.currentText()), self.GPU_mode)
        self.importDataClicked = True
        self.importDataThread.finished.connect(self.dataImportedDialog)
        self.importDataThread.error.connect(self.dataImportErrorDialog)
        
        #self.importDataThread.progress.connect(self.dataImportProgressUpdate)
        self.importDataThread.start()


    def dataImportedDialog(self, rawDataDict):
        self.rawData = rawDataDict['MappedData']
        self.chunkInfo = np.array([rawDataDict['MaxChunkMem'],rawDataDict['ChunkNum'],rawDataDict['FramesPerChunk']])
        self.dataSize = len(self.rawData) # We must store the size so when we display the preview it doesn't lag when computing frame indices...
        self.mediaSlider_2.setEnabled(True)
        self.mediaTimeLabel_2.setText(f"Time: 0s/{self.dataSize // self.frameRateSpinBox.value()}s") # First frame
        self.selectFileButton.setEnabled(True)
        self.loadFileButton.setEnabled(True)
        self.startButton_2.setEnabled(True)
        #self.stopButton_2.setEnabled(True)
        #tif.imwrite("T8/raw_data.tif", rawData)
        self.importVideo.setImage(np.array(self.rawData[0]), axes = {'x':1, 'y':0}) # Display the data (first frame)
        self.loadingLabel.setText("Success!")
        self.loadingLabel.setAlignment(QtCore.Qt.AlignCenter) # Weird bug where text becomes uncentered after setting...
        self.nextToRegistrationButton.show()
        self.setRegistrationPage()

    def dataImportErrorDialog(self, errorMessage):
        self.loadingLabel.setText("")
        self.selectFileButton.setEnabled(True)
        self.loadFileButton.setEnabled(True)
        self.GPUstate.setEnabled(True)
        self.showPopup("Import Data Error", "Invalid Folder Files", "critical")

    # def dataImportProgressUpdate(self, progress):
    #     print(f"Import Progress made: {progress}")
    #     self.fileImportProgressBar.setValue(progress)
    #     QtWidgets.QApplication.processEvents()

    def showPopup(self, title="Error", message="A error occurred.", type="critical"):
        msg = QtWidgets.QMessageBox()

        if type == "info":
            msg.setIcon(QtWidgets.QMessageBox.Information)
        elif type == "warning":
            msg.setIcon(QtWidgets.QMessageBox.Warning)
        elif type == "critical":
            msg.setIcon(QtWidgets.QMessageBox.Critical)
        elif type == "question":
            msg.setIcon(QtWidgets.QMessageBox.Question)

        msg.setText(title)
        msg.setInformativeText(message)
        msg.setWindowTitle("Error")
        msg.exec_()

    # REGISTERATION TAB FUNCTIONS
    def setRegistrationPage(self):
        avg = np.average(self.rawData[0:500], axis = 0)

        image_height, image_width = self.rawData[0].shape
        image_item = pg.ImageItem()
        image_item.setOpts(axisOrder='row-major')
        image_item.setImage(avg)
        
        # Set the aspect ratio to be 'equal' so that one unit in x is the same size as one unit in y
        self.inputImageUnsized.setAspectLocked(True)

        # Set the range of the axes to match the size of the image
        self.inputImageUnsized.setXRange(0, image_width)
        self.inputImageUnsized.setYRange(image_height,0)
        self.inputImageUnsized.invertY(True)

        self.inputImageUnsized.clear()
        self.inputImageUnsized.addItem(image_item)

        
        self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("RegistrationTab"), True)
        self.InputOutputTab.setTabEnabled(self.TabIndices("OutputTab"), False)
        ##self.inputImageUnsized.setImage(np.rot90(avg, -1))
    
    def checkSpinBoxes(self):
        if self.averageFramesSpinBox.value() > 0 and self.updateEveryFramesSpinBox.value() > 0 and self.contrastSpinBox.value() > 0 and  self.row2SpinBox.value() - self.row1SpinBox.value() > 0 and self.column2SpinBox.value() - self.column1SpinBox.value() >= 0:
            self.applyButton.setEnabled(True)
        else:
            self.applyButton.setEnabled(False)

    def applyRegisterParameters(self):
        row1 = self.row1SpinBox.value()
        col1 = self.column1SpinBox.value()
        row2 = self.row2SpinBox.value()
        col2 = self.column2SpinBox.value()

        image_height, image_width = self.rawData[0].shape
        print(f"Image Height: {image_height}, Image Width: {image_width}")

        # TODO: Why does the resized image look so much brighter???
        raw_avg = np.average(self.rawData[0:500], axis = 0)
        avg = np.zeros_like(self.rawData[0]) # Create padding (so that the image doesn't have its origin at 0, 0 in the displayed window and we can display axis scale correctly)
        avg[row1:row2, col1:col2] = raw_avg[row1:row2, col1:col2] # np.average(self.rawData[0:500, row1:row2, col1:col2], axis = 0)
        
        avg = avg/np.amax(avg)
        avg = np.power(avg,self.contrastSpinBox.value())
        
        image_item = pg.ImageItem()
        image_item.setOpts(axisOrder='row-major')
        image_item.setImage(avg)

        # Set the aspect ratio to be 'equal' so that one unit in x is the same size as one unit in y
        # TODO: Include or not???
        self.inputImageResized.setAspectLocked(True)

        # Set the range of the axes to match the size of the image
        # TODO: Fix these ranges... Some weird scaling with odd parameters...
        self.inputImageResized.setXRange(0, image_width)
        self.inputImageResized.setYRange(image_height, 0)
        self.inputImageResized.invertY(True)

        self.inputImageResized.clear() # Clear any previous image out
        self.inputImageResized.addItem(image_item)
        self.registerButton.setEnabled(True)

        # raw_avg = np.average(self.rawData[0:500], axis = 0)
        unsized_image_item = pg.ImageItem()
        unsized_image_item.setOpts(axisOrder='row-major')
        unsized_image_item.setImage(raw_avg)

        self.inputImageUnsized.clear()
        self.inputImageUnsized.addItem(unsized_image_item)

        left_line = pg.PlotDataItem(x=[col1, col1], y=[row1, row2], pen='r')
        right_line = pg.PlotDataItem(x=[col2, col2], y=[row1, row2], pen='r')
        bottom_line = pg.PlotDataItem(x=[col1, col2], y=[row1, row1], pen='r')
        top_line = pg.PlotDataItem(x=[col1, col2], y=[row2, row2], pen='r')
        self.inputImageUnsized.addItem(left_line)
        self.inputImageUnsized.addItem(right_line)
        self.inputImageUnsized.addItem(bottom_line)
        self.inputImageUnsized.addItem(top_line)

        self.registerLoadingLabel.setText("New Parameters Applied!")
        self.registerLoadingLabel.setAlignment(QtCore.Qt.AlignCenter)

    # CREATE THREAD AND CONNECT IT TO OUTPUTS
    def registerDataDialog(self):
        self.registerButton.setEnabled(False)
        self.applyButton.setEnabled(False)
        self.row1SpinBox.setEnabled(False)
        self.row2SpinBox.setEnabled(False)
        self.column1SpinBox.setEnabled(False)
        self.column2SpinBox.setEnabled(False)
        self.registerLoadingLabel.setText("Registering...")
        self.registerLoadingLabel.setAlignment(QtCore.Qt.AlignCenter)

        params = [self.row1SpinBox.value(), self.row2SpinBox.value(), self.column1SpinBox.value(), self.column2SpinBox.value(), self.updateEveryFramesSpinBox.value(), self.averageFramesSpinBox.value(), self.contrastSpinBox.value()]
        self.registerDataThread = RegisterDataThread(params, self.tempFolderPath, self.outputFolderPath, self.GPU_mode)
        self.registerDataClicked = True
        self.registerDataThread.finished.connect(self.registerDataFinishedDialog)
        #self.registerDataThread.error.connect(self.registerDataErrorDialog)
        #self.registerDataThread.progress.connect(self.registerDataProgressUpdate)
        self.registerDataThread.start()
        # print("Thread started!")

    @QtCore.pyqtSlot(object)
    def registerDataFinishedDialog(self):

        self.remapThread = RemapDataThread(self.tempFolderPath)
        self.remapThread.finished.connect(self.remapDataFinishedDialog)
        self.remapThread.start()

        self.applyButton.setEnabled(True)
        self.row1SpinBox.setEnabled(True)
        self.row2SpinBox.setEnabled(True)
        self.column1SpinBox.setEnabled(True)
        self.column2SpinBox.setEnabled(True)
        self.registerLoadingLabel.setText("Success!")
        self.xShift.clear()
        self.yShift.clear()
        self.registerLoadingLabel.setAlignment(QtCore.Qt.AlignCenter)
        
        reg_data_path = os.path.join(self.tempFolderPath, "registered_data.zarr")
        motion_shifts_path = os.path.join(self.outputFolderPath,'stacks', "XYshifts.txt")
        self.registeredData = zarr.open(reg_data_path, mode="r")
        self.motionShifts = np.loadtxt(motion_shifts_path, delimiter=',')
        print(getsizeof(self.registeredData))
        print(getsizeof(self.motionShifts))

        self.registeredImage.setImage(np.array(self.registeredData[0]), axes = {'x':1, 'y':0},autoLevels = True) # Changed to True
        self.xShift.plot(self.motionShifts[:,0])
        self.yShift.plot(self.motionShifts[:,1])
        self.xShiftTracker = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen('r'))
        self.yShiftTracker = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen('r'))
        self.xShiftTracker.setPos(0)
        self.yShiftTracker.setPos(0)
        self.xShift.plotItem.addItem(self.xShiftTracker)
        self.yShift.plotItem.addItem(self.yShiftTracker)
                

        self.InputOutputTab.setTabEnabled(self.TabIndices("OutputTab"), True)
        self.InputOutputTab.setCurrentIndex(self.TabIndices("OutputTab"))
        self.numFramesLabel.setText("<u>Number of Frames Averaged</u> : <b>" + str(self.averageFramesSpinBox.value()) + "</b>")
        self.updateEveryFramesLabel.setText("<u>Update Every How Many Frames</u> : <b>" + str(self.updateEveryFramesSpinBox.value()) + "</b>")
        self.contrastLabel.setText("<u>Contrast</u> : <b>" + str(self.contrastSpinBox.value()) + "</b>")
        self.rowCoordinatesLabel.setText("<u>Row Coordinates</u> : <b>(" + str(self.row1SpinBox.value()) + ", " + str(self.row2SpinBox.value()) + ")</b>")
        self.columnCoordinatesLabel.setText("<u>Column Coordinates</u> : <b>(" + str(self.column1SpinBox.value()) + ", " + str(self.column2SpinBox.value()) + ")</b>")
        self.InputOutputTab.setTabEnabled(self.TabIndices("OutputTab"), True)
        self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("SegmentationTab"), True)

    @QtCore.pyqtSlot(object)
    def remapDataFinishedDialog(self, remapPath):
        self.extractTraceButton.setEnabled(True)
        self.remappedData = zarr.open(remapPath,mode="r")
        #print(self.remappedData.shape)

    def nextToSegmentation(self):
        if len(self.registeredData) > 2000:
            self.averageImageRegistered = np.average(self.registeredData[0:2000], axis = 0)
        else:
            self.averageImageRegistered = np.average(self.registeredData, axis = 0)
        self.applyModel.setEnabled(True)
        self.segmentedContours.setImage(self.averageImageRegistered, axes = {'x':1, 'y':0},autoLevels = True)
        self.VoltagePipelineTabWidget.setCurrentIndex(self.TabIndices("SegmentationTab"))


    def saveRegisteredData(self):
        
        self.saveRegisteredThread = SaveRegistered(self.outputFolderPath, self.registeredData, self.motionShifts)
        self.saveRegisteredThread.start()
        


    def registerDataErrorDialog(self, errorMessage):
        self.registerButton.setEnabled(True)
        self.applyButton.setEnabled(True)
        self.registerLoadingLabel.setText("")
        self.showPopup("Registration Error", errorMessage, "critical")

    def registerDataProgressUpdate(self, progress):
        # TODO: Maybe show x out of x chunks are being processed???

        if progress >= 0:
            self.registrationProgressBar.setValue(progress)
        else: # Handle special case where it receives special signal that it is writing out the data
            self.registerLoadingLabel.setText("Writing out registered data...")
            self.registerLoadingLabel.setAlignment(QtCore.Qt.AlignCenter)
        
        QtWidgets.QApplication.processEvents()

    def updateRegisteredMediaTime(self, value):
        index = min(int((self.dataSize / self.registeredSliderTicks) * value), self.dataSize - 1)
        if index > 5:
            temp_chunk = self.registeredData[index-5:index+5]
            temp_chunk = np.average(temp_chunk, axis=0)
        else:
            temp_chunk = self.registeredData[0:index+5]
            temp_chunk = np.average(temp_chunk, axis=0)

        frame = np.array(temp_chunk)
        self.registeredImage.setImage(frame, axes = {'x':1, 'y':0},autoLevels = False)
        self.xShiftTracker.setPos(index)
        self.yShiftTracker.setPos(index)
        self.totalTime = self.dataSize // self.frameRateSpinBox.value()
        self.timeTaken = (index + 1) // self.frameRateSpinBox.value()
        self.registeredImageTime.setText(f"Time: {self.timeTaken}s/{self.totalTime}s")

    def playRegisteredVideo(self):
        if self.registeredImagePlayVid:
            self.registeredImagePlayVid = False
            if not self.registerTimer.isActive():
                self.registerTimer.start(5)
            self.registeredImageMediaButton.setText('Pause')
        else:
            self.registeredImagePlayVid = True
            self.registeredImageMediaButton.setText('Play')
            self.registerTimer.stop()
        
        
    def showNextRegisteredFrame(self):
        index = self.registeredImageSlider.value() + 1
        if index >= self.registeredSliderTicks:
            self.registerTimer.stop()
        else:
            self.registeredImageSlider.setValue(index)


    ## Segmentation Tab Functions ##
    def updateButtons(self):
        # Get the current text of the combo box
        currentText = self.modelState.currentText()

        # Show the selectModel button and hide the resetPoints button if the current text is "Use Model"
        if currentText == "Use Model":
            self.selectModel.show()
            self.resetPoints.hide()
            self.stop_manual_segment()

        # Show the resetPoints button and hide the selectModel button if the current text is "Manual Segmentation"
        elif currentText == "Manual Segmentation":
            self.resetPoints.show()
            self.selectModel.hide()
            self.manual_segment()

    def openModelDialog(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Model", "", "Zip Files (*.zip)", options=options)
        if fileName:
            print("Selected Model:", fileName)
            self.importModelPath = fileName
            self.pathToModelLabel.setText(fileName)
            self.pathToModelLabel.show()
            self.applyModel.setEnabled(True)

    def segment_data(self):
        m,n = self.averageImageRegistered.shape
        if self.manualSegmentationFlag:
            self.binaryROIs = np.zeros((len(self.rois), m,n))
            self.roiCoords = np.zeros((len(self.rois), 4))
            for i in range(len(self.rois)):
                qrec = self.rois[i].parentBounds()
                m_min = int(qrec.top())
                m_max = int(qrec.bottom())
                n_min = int(qrec.left())
                n_max = int(qrec.right())
                small = self.rois[i].renderShapeMask(m_max-m_min, n_max-n_min)
                self.binaryROIs[i,m_min:m_max,n_min:n_max] = small*self.averageImageRegistered[m_min:m_max,n_min:n_max]
                self.roiCoords[i] = [m_min,m_max,n_min,n_max]
                self.binaryROIs[i] = self.binaryROIs[i]/np.amax(self.binaryROIs[i])
        else:
            cellpose = CellposeRunner(
                        model_type="cyto3",
                        channels=[0,0],  # Grayscale images
                        diameter=30.0,   # Expected cell diameter in pixels
                        gpu=False       # Use CPU
                        )
            seg_results = cellpose.process_image(self.averageImageRegistered)
            num_cell_detected = np.amax(seg_results['masks'])
            print(seg_results['masks'].shape)
            print(num_cell_detected)
            self.binaryROIs = np.zeros((num_cell_detected, m,n))
            self.roiCoords = np.zeros((num_cell_detected, 4))
            for i in range(num_cell_detected):
                self.binaryROIs[i] = seg_results['masks'] == i+1
                self.roiCoords[i] = context_region(self.binaryROIs[i])
                self.binaryROIs[i] = self.binaryROIs[i]/np.amax(self.binaryROIs[i])

            ## Load model to segment data
            pass

        # TODO: save self.binaryROIs as a TIF stack file
        print(self.binaryROIs.shape)
        tif.imwrite(self.outputFolderPath+'/stacks/ROIs.tif', self.binaryROIs)
        all_rois = np.sum(self.binaryROIs, axis=0)
        self.segmentedROIs.setImage(all_rois, axes = {'x':1, 'y':0})


    def remove_roi(self, roi):
        for x, y in self.rois_points[roi]:
            self.remove_point(x, y)
        self.rois.remove(roi)
        self.segmentedContours.removeItem(roi)
        del self.rois_points[roi]

        
        self.rois_points = {self.rois[i]: self.rois_points[self.rois[i]] for i in range(len(self.rois))}

    def remove_point(self, x, y):
        x_val, y_val = self.scatterItem.getData()

        mask = np.sqrt((x_val - x)**2 + (y_val - y)**2) > 1
        #self.scatterItem.clear()

        self.scatterItem.setData(x_val[mask], y_val[mask])

    def draw_roi(self, event):
        scene_coords = event[0].scenePos()
        self.colors = ['r', 'b', 'g', 'y', 'm', 'c']

        if event[0].double():
            # pyqtgraph roi
            
            roi = pg.PolyLineROI(self.roi_coords, closed=True, pen=self.colors[len(self.rois) % len(self.colors)])
            self.rois.append(roi)
            self.segmentedContours.addItem(roi)
            self.rois_points[roi] = list(self.roi_coords)
            self.roi_coords = []

        else:
            img_coords = self.segmentedContours.getView().mapSceneToView(scene_coords)
            remove_flag = False
            
            for roi in self.rois:
                for handle in roi.getLocalHandlePositions():
                    pos = handle[1]  # Get the position as a QPointF object
                    y = pos[1] # Get the x and y coordinates
                    x = pos[0]
                    print("Handle Position", x, y)
                    print("Click Position", img_coords.x(), img_coords.y())
                    
                    if np.sqrt((img_coords.x() - x)**2 + (img_coords.y() - y)**2) <= 3:
                        self.remove_roi(roi)
                        remove_flag = True
                        break
            
            for coords in self.roi_coords:
                if np.sqrt((img_coords.x() - coords[0])**2 + (img_coords.y() - coords[1])**2) <= 3:
                    self.roi_coords.remove(coords)
                    self.remove_point(coords[0], coords[1])
                    remove_flag = True
                    break

            if remove_flag:
                print("Removed", img_coords.x(), img_coords.y())
                return
            self.roi_coords.append([img_coords.x(), img_coords.y()])
            self.scatterItem.addPoints([img_coords.x()], [img_coords.y()], pen=self.colors[len(self.rois) % len(self.colors)])
            print("Click Position", img_coords.x(), img_coords.y())


    def manual_segment(self):
        print("Manual Segmentation")
        self.manualSegmentationFlag = True
        self.scatterItem = pg.ScatterPlotItem(
            size=10, 
            pen=pg.mkPen(None), 
            brush=pg.mkBrush(255, 0, 0),
            hoverable=True,
            hoverBrush=pg.mkBrush(0, 255, 255)
        )
        self.segmentedContours.addItem(self.scatterItem)
        self.roi_coords = []
        self.rois = []
        self.rois_points = {}
        self.proxy = pg.SignalProxy(self.segmentedContours.getView().scene().sigMouseClicked, rateLimit=60, slot=self.draw_roi)

    def stop_manual_segment(self):
        self.manualSegmentationFlag = False

        # Check if scatterItem has been defined
        if hasattr(self, 'scatterItem') and self.scatterItem is not None:
            # Remove the scatterItem from the segmentedContours plot
            self.segmentedContours.removeItem(self.scatterItem)
            self.scatterItem = None

        # Check if proxy has been defined
        if hasattr(self, 'proxy') and self.proxy is not None:
            # Disconnect the sigMouseClicked signal from the draw_roi slot
            self.proxy.disconnect()
            self.proxy = None

        # Clear the roi_coords, rois and rois_points lists
        self.roi_coords = []
        self.rois = []
        self.rois_points = {}

    def reset_points(self):
        print("Reset Points")
        for i in range(len(self.rois)):
            self.segmentedContours.removeItem(self.rois[i])
        self.scatterItem.clear()
        self.roi_coords = []
        self.rois = []
        self.rois_points = {}
        self.segmentedContours.clear()
        self.segmentedContours.setImage(self.averageImageRegistered, axes = {'x':1, 'y':0})

    def extract_trace(self):
        # write extraction code here
        self.VoltagePipelineTabWidget.setTabEnabled(self.TabIndices("ExtractionTab"), True)
        self.VoltagePipelineTabWidget.setCurrentIndex(self.TabIndices("ExtractionTab"))
        self.segmentedSources.setImage(self.averageImageRegistered, axes = {'x':1, 'y':0})

        print(self.binaryROIs.shape)
        print(type(self.binaryROIs))
        print(self.rois)
        for i in range(len(self.rois)):
            points = self.rois_points[self.rois[i]]
        
            # Print all points in the current ROI
            print(f"ROI {i} points:")
            for point in points:
                print(point)
        
        numROI = 0
        for i in range(len(self.rois)):
            
            self.segmentedSources.addItem(self.rois[i])

            points = self.rois_points[self.rois[i]]
            
            if points:  # Check if points is not empty
                min_point = min(points, key=lambda point: point[1])

                text = pg.TextItem(text=str(numROI), color = self.colors[numROI % len(self.colors)])

                text.setPos(min_point[0] - 5, min_point[1] - 10)

                self.segmentedSources.addItem(text)
                numROI += 1
                

        self.frameRate = self.frameRateSpinBox.value()
        if self.polarityInput.currentText() == "Positive":
            self.pole = False
        else:
            self.pole = True
        
        sources = numROI
        self.sourceNum.setRange(0,sources-1)
        remapped_data_path = os.path.join(self.tempFolderPath, "remapped_data.zarr")
        roi_data_path = os.path.join(self.outputFolderPath,'stacks', "ROIs.tif")
        self.extractionThread = ExtractionThread(remapped_data_path, roi_data_path, self.pole, self.frameRate, self.outputFolderPath)
        self.extractionThread.finished.connect(self.finished_extraction)
        self.extractionThread.start()
    
    @QtCore.pyqtSlot(object)
    def finished_extraction(self, results):
        save_data_path = os.path.join(self.outputFolderPath, 'saved')
        files = [f for f in os.listdir(save_data_path) if f.endswith('.npy')]
        file = files[-1]
        results = np.load(os.path.join(save_data_path, file), allow_pickle=True).item()
        self.resultsDict = results
        self.footprints = results['Masks']
        self.traces = results['DFF']
        self.spikewaveforms = results['SpikeTemplate']
        self.spikesnr = results['SpikeSNR']
        self.spikeTimes = results['Spikes']

        for i in range(len(self.traces)):
            temp = self.extractedTraces.addPlot(row=i,col=0,y=self.traces[i], pen=self.colors[i % len(self.colors)])
            temp.showAxes(False, False)

    def update_source(self):

        source = self.sourceNum.value()
        self.sourceTrace.clear()
        self.sourceSpikewaveform.clear()
        self.sourceFootprint.clear()

        self.sourceTrace.plot(self.traces[source])
        self.sourceSpikewaveform.plot(self.spikewaveforms[source])

        snr_label = pg.TextItem("SNR: {:.2f}".format(self.spikesnr[source]), anchor=(1, 0))
        snr_label.setPos(self.sourceSpikewaveform.getViewBox().viewRange()[0][1], self.sourceSpikewaveform.getViewBox().viewRange()[1][1])
        self.sourceSpikewaveform.addItem(snr_label)
        self.sourceFootprint.setImage(self.footprints[source], axes = {'x':1, 'y':0})

        #self.sourceTrace.getViewBox().autoRange()
        self.sourceTrace.setXRange(0, len(self.traces[source]))
        self.sourceTrace.setYRange(min(self.traces[source]), max(self.traces[source]))
        self.sourceSpikewaveform.setXRange(0, len(self.spikewaveforms[source]))
        self.sourceSpikewaveform.setYRange(min(self.spikewaveforms[source]), max(self.spikewaveforms[source]))


    # def save_extraction_data(self):
    #     if not os.path.exists(self.outputFolderPath+'/stacks'):
    #         os.makedirs(self.outputFolderPath+'/stacks')
        
    #     # save self.binaryROIs as a TIF stack file
    #     # In ROIs folder
    #     tif.imwrite(self.outputFolderPath+'/stacks/ROIs.tif', self.binaryROIs)
        
    #     # Creates saved directory based on the current date and time
    #     now = datetime.now()
    #     saved_dir = os.path.join(self.outputFolderPath, 'saved')
    #     if not os.path.exists(saved_dir):
    #         os.makedirs(saved_dir)

    #     date_time = now.strftime("%Y-%m-%d_%H%M%S")
    #     output_file_name = "VIP_Saved_" + date_time
        
    #     #folder_path = os.path.join(saved_dir, folder_name)
    #     #os.makedirs(folder_path, exist_ok=True)

    #     # Save the registered data as a numpy object and a mat file
    #     np.save(os.path.join(saved_dir, output_file_name+'_results.npy'), self.resultsDict)
    #     sio.savemat(os.path.join(saved_dir, output_file_name+'_results.mat'), self.resultsDict)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Voltage Imaging Pipeline from The Golshani Lab"))
        # self.mainLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600; text-decoration: underline;\">Import Data</span></p></body></html>"))
        self.selectFileButton.setText(_translate("MainWindow", "Select Data"))
        self.mediaTimeLabel_2.setText(_translate("MainWindow", "Time: 0s/0s"))
        self.startButton_2.setText(_translate("MainWindow", "Play"))
        #self.stopButton_2.setText(_translate("MainWindow", "Stop"))
        # self.importVideo.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/inputGraphs/assets/ResizedInputImage.png\"/></p></body></html>"))
        self.nextToRegistrationButton.setText(_translate("MainWindow", "Next"))
        self.pathToFileLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">path_to_file</span></p></body></html>"))
        self.loadFileButton.setText(_translate("MainWindow", "Load"))
        # self.GPUstate.setText(_translate("MainWindow", "GPU mode"))
        self.loadingLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"></p></body></html>"))
        self.downsamplingInput.setCurrentText(_translate("MainWindow", "1"))
        self.downsamplingInput.setItemText(0, _translate("MainWindow", "1"))
        self.downsamplingInput.setItemText(1, _translate("MainWindow", "2"))
        self.downsamplingInput.setItemText(2, _translate("MainWindow", "3"))
        self.downsamplingInput.setItemText(3, _translate("MainWindow", "4"))
        self.downsamplingInput.setItemText(4, _translate("MainWindow", "5"))
        self.GPUstate.setCurrentText(_translate("MainWindow", "CPU Mode"))
        self.GPUstate.setItemText(0, _translate("MainWindow", "CPU Mode"))
        self.GPUstate.setItemText(1, _translate("MainWindow", "GPU Mode"))
        self.modelState.setCurrentText(_translate("MainWindow", "Use Model"))
        self.modelState.setItemText(0, _translate("MainWindow", "Use Model"))
        self.modelState.setItemText(1, _translate("MainWindow", "Manual Segmentation"))
        self.polarityInput.setCurrentText(_translate("MainWindow", "Positive"))
        self.polarityInput.setItemText(0, _translate("MainWindow", "Positive"))
        self.polarityInput.setItemText(1, _translate("MainWindow", "Negative"))
        self.downsamplingLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:9pt; font-weight:600;\">Downsampling Factor:</span></p></body></html>"))
        self.polarityLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:9pt; font-weight:600;\">Polarity:</span></p></body></html>"))
        self.frameRateLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:9pt; font-weight:600;\">Frame Rate:</span></p></body></html>"))
        self.VoltagePipelineTabWidget.setTabText(self.VoltagePipelineTabWidget.indexOf(self.ImportTab), _translate("MainWindow", "Import Data"))
        # self.inputImageUnsized.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/inputGraphs/assets/ResizedInputImage.png\"/></p></body></html>"))
        self.templateLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600; text-decoration: underline;\">Template Settings</span></p></body></html>"))
        self.averageFramesText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\"># Frames Averaged</span></p></body></html>"))
        self.offsetText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Update Every __ Frames</span></p></body></html>"))
        self.contrastText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Contrast</span></p></body></html>"))
        self.windowLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600; text-decoration: underline;\">Window Settings</span></p></body></html>"))
        self.rowLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">  Row Coordinates     : </span></p></body></html>"))
        self.row1Label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Y</span><span style=\" font-size:10pt; vertical-align:sub;\">1</span><span style=\" font-size:10pt;\"> : </span></p></body></html>"))
        self.row2Label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Y</span><span style=\" font-size:10pt; vertical-align:sub;\">2</span><span style=\" font-size:10pt;\"> : </span></p></body></html>"))
        self.columnLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Column Coordinates : </span></p></body></html>"))
        self.column1Label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">X</span><span style=\" font-size:10pt; vertical-align:sub;\">1</span><span style=\" font-size:10pt;\"> : </span></p></body></html>"))
        self.column2Label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">X</span><span style=\" font-size:10pt; vertical-align:sub;\">2</span><span style=\" font-size:10pt;\"> : </span></p></body></html>"))
        self.applyButton.setText(_translate("MainWindow", "Apply"))
        self.registerButton.setText(_translate("MainWindow", "Register"))
        self.InputOutputTab.setTabText(self.InputOutputTab.indexOf(self.InputTab), _translate("MainWindow", "Input"))
        self.numFramesLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; text-decoration: underline;\">Number of Frames Averaged</span><span style=\" font-size:12pt;\"> : </span><span style=\" font-size:12pt; font-weight:600;\">20</span></p></body></html>"))
        self.updateEveryFramesLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; text-decoration: underline;\">Update Every How Many Frames</span><span style=\" font-size:12pt;\"> : </span><span style=\" font-size:12pt; font-weight:600;\">10</span></p></body></html>"))
        self.contrastLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; text-decoration: underline;\">Contrast</span><span style=\" font-size:12pt;\"> : </span><span style=\" font-size:12pt; font-weight:600;\">12</span></p></body></html>"))
        self.rowCoordinatesLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; text-decoration: underline;\">Row Coordinates</span><span style=\" font-size:12pt;\">     : </span><span style=\" font-size:12pt; font-weight:600;\">(Row1, Col1)</span></p></body></html>"))
        self.columnCoordinatesLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; text-decoration: underline;\">Column Coordinates</span><span style=\" font-size:12pt;\"> : </span><span style=\" font-size:12pt; font-weight:600;\">(Row2, Col2)</span></p></body></html>"))
        self.registeredImageTime.setText(_translate("MainWindow", "00:00/59:59"))
        self.applyModel.setText(_translate("MainWindow", "Segment"))
        self.selectModel.setText(_translate("MainWindow", "Select Model"))
        self.extractTraceButton.setText(_translate("MainWindow", "Extract Neuronal Traces"))
        # self.manualSegment.setText(_translate("MainWindow", "Manual Segmentation"))
        self.resetPoints.setText(_translate("MainWindow", "Reset Points"))
        self.sourceNumApply.setText(_translate("MainWindow", "Select"))
        #self.removeSource.setText(_translate("MainWindow", "Remove Source"))
        self.refineExtractionButton.setText(_translate("MainWindow", "Extract Spikes"))
        #self.saveDataButton.setText(_translate("MainWindow", "Save Data"))
        self.pathToModelLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">path_to_model</span></p></body></html>"))
        # self.registeredImageLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600; text-decoration: underline;\">Registered Image</span></p></body></html>"))
        # self.registeredImage.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/inputGraphs/assets/ResizedInputImage.png\"/></p></body></html>"))
        #self.xShiftLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">X Shift</span></p></body></html>"))
        #self.xShiftImage.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/inputGraphs/assets/resizedRegisteredGraph.png\"/></p></body></html>"))
        #self.yShiftLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Y Shift</span></p></body></html>"))
        #self.yShiftImage.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/inputGraphs/assets/registeredYShiftGraphRESIZED.png\"/></p></body></html>"))
        self.saveRegData.setText(_translate("MainWindow", "Save Registered Data"))
        self.registeredImageMediaButton.setText(_translate("MainWindow", "Start"))
        self.nextToSegmentationButton.setText(_translate("MainWindow", "Next"))
        # self.registeredImageStop.setText(_translate("MainWindow", "Stop"))
        self.InputOutputTab.setTabText(self.InputOutputTab.indexOf(self.OutputTab), _translate("MainWindow", "Output"))
        self.registerLoadingLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"></p></body></html>"))
        self.VoltagePipelineTabWidget.setTabText(self.VoltagePipelineTabWidget.indexOf(self.RegistrationTab), _translate("MainWindow", "Image Registration"))
        self.VoltagePipelineTabWidget.setTabText(self.VoltagePipelineTabWidget.indexOf(self.SegmentationTab), _translate("MainWindow", "Segmentation"))
        self.VoltagePipelineTabWidget.setTabText(self.VoltagePipelineTabWidget.indexOf(self.ExtractionTab), _translate("MainWindow", "Neuron Extraction"))
    

    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(self,
                      "Confirm Exit...",
                      "Are you sure you want to exit ?",
                      QtWidgets.QMessageBox.Yes| QtWidgets.QMessageBox.No)
        event.ignore()
        if result == QtWidgets.QMessageBox.Yes:
            if (self.importDataClicked and self.importDataThread.isRunning()) or (self.registerDataClicked and self.registerDataThread.isRunning()):
                QtWidgets.QMessageBox.warning(self,
                    "Warning...",
                    "Please wait until the current processes are finished before exiting.",
                    QtWidgets.QMessageBox.Ok)
                return

            if (self.importDataClicked):
                pathToRawSync = os.path.join(self.tempFolderPath, "raw_map.sync")
                pathToRawZarr = os.path.join(self.tempFolderPath, "raw_map.zarr")

                if os.path.exists(pathToRawSync):
                    shutil.rmtree(pathToRawSync)
                if os.path.exists(pathToRawZarr):
                    shutil.rmtree(pathToRawZarr)

            if (self.registerDataClicked):
                pathToRegisteredData = os.path.join(self.tempFolderPath, "registered_data.zarr")
                pathToIntZarr = os.path.join(self.tempFolderPath, "intermediate_data.zarr")
                pathToMappedZarr = os.path.join(self.tempFolderPath, "remapped_data.zarr")

                if os.path.exists(pathToRegisteredData):
                    shutil.rmtree(pathToRegisteredData)
                if os.path.exists(pathToIntZarr):
                    shutil.rmtree(pathToIntZarr)
                if os.path.exists(pathToMappedZarr):
                    shutil.rmtree(pathToMappedZarr)

            print("Application Successfully Closed")
            event.accept()


class CustomViewBox(pg.ViewBox):
    def __init__(self, *args, **kwds):
        pg.ViewBox.__init__(self, *args, **kwds)
        self.setMouseMode(self.PanMode)

    # Override the wheelEvent function to only zoom in x-axis
    def wheelEvent(self, ev, axis=None):
        # Zoom only in x-axis
        factor = 1.001 ** (-ev.delta())
        s = self.targetRect().size()
        mousePoint = self.mapToView(ev.pos())
        self.scaleBy((factor, 1), mousePoint)

### THREADS ###
# Threads are necessary to prevent the GUI from freezing when executing computational functions

class ImportDataThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(object)
    error = QtCore.pyqtSignal(str)
    #progress = QtCore.pyqtSignal(int)

    def __init__(self, importFilePath, tempFolderPath, dsFactor, GPU_mode):
        super().__init__()
        self.importFilePath = importFilePath
        self.tempFolderPath = tempFolderPath
        self.dsFactor = dsFactor
        self.GPU_mode = GPU_mode
        

    def run(self):
        try:
            if os.path.exists(os.path.join(self.tempFolderPath, "raw_map.zarr")): # Overwrite old imported data
                shutil.rmtree(os.path.join(self.tempFolderPath, "raw_map.zarr"))
            rawData = import_data(self.importFilePath, self.tempFolderPath, self.dsFactor, self.GPU_mode)
            
        except Exception as e:
            self.error.emit(str(e))
            return
        
        #self.progress.emit(-1)
        self.finished.emit(rawData)


class CenteredItemDelegate(QtWidgets.QStyledItemDelegate):
    def paint(self, painter, option, index):
        option.displayAlignment = QtCore.Qt.AlignCenter
        super().paint(painter, option, index)

class RegisterDataThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(object)

    def __init__(self, params, tempFolderPath, outputPath ,GPU_mode):
        super().__init__()
        self.rawData = os.path.join(tempFolderPath, 'raw_map.zarr')
        self.params = params
        self.tempFolderPath = tempFolderPath
        self.GPU_mode = GPU_mode*1
        self.outputPath = outputPath
        self.scriptPath = os.path.join(os.getcwd(),'VIPER','register.py')

    def run(self):
        p = subprocess.Popen([sys.executable, str(self.scriptPath), str(self.rawData),str(self.params), str(self.tempFolderPath), str(self.outputPath), str(self.GPU_mode)])
        p.wait()
        self.finished.emit("Registration Completed")


        
class SaveRegistered(QtCore.QThread):
    
    def __init__(self, outputFolderPath, registeredData, motionShifts):
        super().__init__()
        self.outputFolderPath = outputFolderPath
        self.registeredData = registeredData
        self.motionShifts = motionShifts
        
    def run(self):
        if not os.path.exists(self.outputFolderPath+'/stacks'):
            os.makedirs(self.outputFolderPath+'/stacks')

        if os.path.exists(self.outputFolderPath+'/stacks/Registered.tif'):
            os.remove(self.outputFolderPath+'/stacks/Registered.tif')
            os.remove(self.outputFolderPath+'/stacks/XY_shifts.csv')


        with tif.TiffWriter(os.path.normpath(self.outputFolderPath+'/stacks/Registered.tif'),bigtiff=True) as tf:
            for frame in self.registeredData:
                tf.write(frame, contiguous=True)
           
        np.savetxt(os.path.normpath(self.outputFolderPath+'/stacks/XY_shifts.csv'),np.array([self.motionShifts[:,0],self.motionShifts[:,1]]),delimiter=",")
        print('Saving Registered Data Completed')
    

class RemapDataThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(object)

    def __init__(self, tempFolderPath):
        super().__init__()
        self.tempFolderPath = tempFolderPath
        self.registeredDataPath = os.path.join(self.tempFolderPath, 'registered_data.zarr')
        self.remappedDataPath = os.path.join(self.tempFolderPath, 'remapped_data.zarr')
        

    def run(self):
        script = os.path.normpath(os.getcwd()+'/VIPER/rechunk_data.py')
        try:
            p = subprocess.Popen([sys.executable, str(script), str(self.registeredDataPath)])
            p.wait()
        except Exception as e:
            print('Cannot Rechunk')
            print(e)
            print(traceback.format_exc())
        print('Finished Rechunking')
        self.finished.emit(self.remappedDataPath)

class ExtractionThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(object)

    def __init__(self, mappedDataPath, binaryROIs, pole, fs, outputPath):
        super().__init__()
        self.mappedDataPath = mappedDataPath
        self.binaryROIs = binaryROIs
        self.pole = pole*1
        self.fs = fs
        self.outputPath = outputPath

    def run(self):
        try:
            p = subprocess.Popen([sys.executable, os.path.join(os.getcwd(), 'VIPER', 'extract.py'), str(self.mappedDataPath), str(self.binaryROIs), str(self.pole), str(self.fs), str(self.outputPath)])
            p.wait()
        except Exception as e:
            print(e)
            print(traceback.format_exc())
            print("Extraction Failed")
            return
        
        self.finished.emit("finished extraction")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec_())
